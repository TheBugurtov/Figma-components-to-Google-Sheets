const fetch = require('node-fetch');
const { google } = require('googleapis');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const FIGMA_TOKEN = process.env.FIGMA_TOKEN;
const FIGMA_FILE_KEY = 'oZGlxnWyOHTAgG6cyLkNJh';
const GOOGLE_SHEETS_ID = '1liLtRG7yUe1T5wfwEqdOy_B4H-tne2cDoBMIbZZnTUI';
const GOOGLE_CREDENTIALS = JSON.parse(process.env.GOOGLE_CREDENTIALS);
const COMPONENTS_LIMIT = 10; // –ñ–Å–°–¢–ö–û–ï –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ 10 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

async function getFigmaComponents() {
  console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...');
  const response = await fetch(`https://api.figma.com/v1/files/${FIGMA_FILE_KEY}/components`, {
    headers: { 'X-FIGMA-TOKEN': FIGMA_TOKEN }
  });
  
  if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ Figma API: ${response.statusText}`);
  
  const data = await response.json();
  const allComponents = data.meta?.components || [];
  
  console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${allComponents.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
  return allComponents.slice(0, COMPONENTS_LIMIT); // –ë–µ—Ä—ë–º –¢–û–õ–¨–ö–û –ø–µ—Ä–≤—ã–µ 10
}

async function updateGoogleSheets(components) {
  console.log('‚úçÔ∏è –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏...');
  
  const auth = new google.auth.GoogleAuth({
    credentials: GOOGLE_CREDENTIALS,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  const sheets = google.sheets({ version: 'v4', auth });

  // 1. –ñ—ë—Å—Ç–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –ª–∏—Å—Ç–∞
  await sheets.spreadsheets.values.clear({
    spreadsheetId: GOOGLE_SHEETS_ID,
    range: 'A:Z', // –£–¥–∞–ª—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ
  });

  // 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Ä–æ–≤–Ω–æ 10 —Å—Ç—Ä–æ–∫)
  const rows = [
    ['‚Ññ', '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', '–°—Å—ã–ª–∫–∞'],
    ...components.map((comp, index) => [
      index + 1,
      comp.name,
      comp.instances_count || 0,
      `https://www.figma.com/file/${FIGMA_FILE_KEY}/?node-id=${comp.node_id}`
    ])
  ];

  console.log('‚úÖ –ë—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã 10 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
  console.log(rows.slice(1).map(row => row[1]).join('\n'));

  // 3. –ó–∞–ø–∏—Å—å
  await sheets.spreadsheets.values.update({
    spreadsheetId: GOOGLE_SHEETS_ID,
    range: 'A1',
    valueInputOption: 'RAW',
    resource: { values: rows }
  });

  console.log('üöÄ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!');
}

async function main() {
  try {
    console.log('üîÑ –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    const components = await getFigmaComponents();
    
    if (components.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    console.log(`üõ† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: ${components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
    await updateGoogleSheets(components);
    
    console.log(`üéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É: 
    https://docs.google.com/spreadsheets/d/${GOOGLE_SHEETS_ID}/edit`);
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê:', error.message);
    process.exit(1);
  }
}

main();