const fetch = require('node-fetch');
const { google } = require('googleapis');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  FIGMA_TOKEN: process.env.FIGMA_TOKEN,
  FIGMA_FILE_KEY: 'oZGlxnWyOHTAgG6cyLkNJh',
  GOOGLE_SHEETS_ID: '1liLtRG7yUe1T5wfwEqdOy_B4H-tne2cDoBMIbZZnTUI',
  GOOGLE_CREDENTIALS: JSON.parse(process.env.GOOGLE_CREDENTIALS),
  MAX_COMPONENTS: 2000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç
  SCAN_DEPTH: 999 // –ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
};

// 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
async function getFullFileStructure() {
  console.log('üìÇ –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞...');
  const response = await fetch(`https://api.figma.com/v1/files/${CONFIG.FIGMA_FILE_KEY}`, {
    headers: { 'X-FIGMA-TOKEN': CONFIG.FIGMA_TOKEN }
  });
  if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${await response.text()}`);
  return await response.json();
}

// 2. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
function findComponentsRecursive(node, pageName, results = []) {
  if (!node) return results;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
  if (node.type === 'COMPONENT') {
    const isValid = (
      node.description?.trim() && 
      !node.name.includes('=') &&
      !node.name.startsWith('_') // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å _
    );

    if (isValid) {
      results.push({
        id: node.id,
        name: node.name.replace(/\n/g, ' '), // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        description: node.description.trim(),
        page: pageName,
        node: node // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é –Ω–æ–¥—É –¥–ª—è –¥–µ–±–∞–≥–∞
      });
    }
  }

  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–π
  if (node.children) {
    node.children.forEach(child => {
      findComponentsRecursive(child, pageName, results);
    });
  }

  return results;
}

// 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞—á–∫–∞–º–∏
async function getComponentsUsage(componentIds) {
  console.log('üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏...');
  const chunkSize = 100; // Figma API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 100 ID –≤ –∑–∞–ø—Ä–æ—Å–µ
  const usageData = {};

  for (let i = 0; i < componentIds.length; i += chunkSize) {
    const chunk = componentIds.slice(i, i + chunkSize);
    const response = await fetch(
      `https://api.figma.com/v1/files/${CONFIG.FIGMA_FILE_KEY}/component_usages?ids=${chunk.join(',')}`,
      { headers: { 'X-FIGMA-TOKEN': CONFIG.FIGMA_TOKEN } }
    );
    
    if (!response.ok) {
      console.error(`–û—à–∏–±–∫–∞ –¥–ª—è —á–∞–Ω–∫–∞ ${i}-${i + chunkSize}:`, response.status);
      continue;
    }

    const data = await response.json();
    Object.assign(usageData, data.meta);
  }

  return usageData;
}

// 4. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
async function getAllComponents() {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    const { document } = await getFullFileStructure();
    
    let allComponents = [];
    const pageNames = {};

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    document.children.forEach(page => {
      pageNames[page.id] = page.name;
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    for (const page of document.children) {
      console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${page.name}`);
      
      const response = await fetch(
        `https://api.figma.com/v1/files/${CONFIG.FIGMA_FILE_KEY}/nodes?ids=${page.id}&depth=${CONFIG.SCAN_DEPTH}`,
        { headers: { 'X-FIGMA-TOKEN': CONFIG.FIGMA_TOKEN } }
      );
      
      const { nodes } = await response.json();
      const pageComponents = findComponentsRecursive(nodes[page.id], page.name);
      
      allComponents = [...allComponents, ...pageComponents];
      console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${pageComponents.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);

      if (allComponents.length >= CONFIG.MAX_COMPONENTS) {
        console.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ ${CONFIG.MAX_COMPONENTS} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
        break;
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    const usageData = await getComponentsUsage(allComponents.map(c => c.id));
    
    // –û–±–æ–≥–∞—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    return allComponents.map(comp => ({
      ...comp,
      instances_count: usageData[comp.id]?.instances_count || 0
    }));

  } catch (error) {
    console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    throw error;
  }
}

// 5. –ó–∞–ø–∏—Å—å –≤ Google Sheets
async function updateSheets(components) {
  const auth = new google.auth.GoogleAuth({
    credentials: CONFIG.GOOGLE_CREDENTIALS,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  const sheets = google.sheets({ version: 'v4', auth });

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const rows = [
    ['–°—Ç—Ä–∞–Ω–∏—Ü–∞', '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', '–°—Å—ã–ª–∫–∞'],
    ...components.map(comp => [
      comp.page,
      comp.name,
      comp.description,
      comp.instances_count,
      `https://www.figma.com/file/${CONFIG.FIGMA_FILE_KEY}/?node-id=${comp.id}`
    ])
  ];

  console.log('üìù –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', rows.slice(1, 4));

  // –ó–∞–ø–∏—Å—å
  await sheets.spreadsheets.values.update({
    spreadsheetId: CONFIG.GOOGLE_SHEETS_ID,
    range: 'A1',
    valueInputOption: 'USER_ENTERED',
    resource: { values: rows }
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
    const startTime = Date.now();
    
    const components = await getAllComponents();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${components.length}`);
    
    if (components.length > 0) {
      await updateSheets(components);
      console.log(`üîÑ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∑–∞ ${Math.round((Date.now() - startTime)/1000} —Å–µ–∫`);
      console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: https://docs.google.com/spreadsheets/d/${CONFIG.GOOGLE_SHEETS_ID}/edit`);
    } else {
      console.log('‚ÑπÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('1. –ù–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ');
      console.log('2. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–∫–µ–Ω–∞');
      console.log('3. –§–∏–ª—å—Ç—Ä—ã (–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ = –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)');
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main();