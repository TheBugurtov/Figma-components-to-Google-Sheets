const fs = require("fs");
const fetch = require("node-fetch");
const { GoogleSpreadsheet } = require("google-spreadsheet");

const FIGMA_TOKEN = process.env.FIGMA_TOKEN;
const GOOGLE_CREDENTIALS = JSON.parse(process.env.GOOGLE_CREDENTIALS);
const GOOGLE_SHEETS_ID = process.env.GOOGLE_SHEETS_ID;

const filesList = fs.readFileSync("figma_files.txt", "utf8")
  .split("\n")
  .map(l => l.trim())
  .filter(Boolean);

async function fetchJson(url) {
  const res = await fetch(url, { headers: { "X-Figma-Token": FIGMA_TOKEN } });
  if (!res.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}: ${res.status} ${res.statusText}`);
  }
  return await res.json();
}

// 1) –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
async function getFileDocument(fileKey) {
  const url = `https://api.figma.com/v1/files/${fileKey}`;
  const data = await fetchJson(url);
  return data.document;
}

// 2) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å description –∏–∑ API /components (–≤–∫–ª—é—á–∞—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ description)
async function getAllComponents(fileKey) {
  const url = `https://api.figma.com/v1/files/${fileKey}/components`;
  const data = await fetchJson(url);
  // components –≤ —Ñ–æ—Ä–º–∞—Ç–µ { node_id: {name, description, ...} }
  return data.meta.components || {};
}

// 3) –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ COMPONENT –∏ COMPONENT_SET
function collectComponentsFromNode(node, acc) {
  if (!node) return;
  if (node.type === "COMPONENT" || node.type === "COMPONENT_SET") {
    acc.push({
      id: node.id,
      name: node.name,
      type: node.type,
      // description –∏–∑ –¥–µ—Ä–µ–≤–∞ –Ω–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –ø–æ–∑–∂–µ –∏–∑ API
    });
  }
  if (Array.isArray(node.children)) {
    for (const child of node.children) {
      collectComponentsFromNode(child, acc);
    }
  }
}

// 4) –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ /components API —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –≤ –¥–µ—Ä–µ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
function mergeDescriptions(componentsFromTree, componentsFromAPI) {
  return componentsFromTree.map(c => {
    const descObj = componentsFromAPI[c.id];
    return {
      ...c,
      description: descObj ? descObj.description || "" : "",
      file_key: descObj ? descObj.file_key || "" : ""
    };
  });
}

// 5) –ó–∞–ø–∏—Å—å –≤ Google Sheets
async function writeToGoogleSheets(components) {
  const doc = new GoogleSpreadsheet(GOOGLE_SHEETS_ID);
  await doc.useServiceAccountAuth(GOOGLE_CREDENTIALS);
  await doc.loadInfo();

  const sheet = doc.sheetsByIndex[0];
  await sheet.clear();
  await sheet.setHeaderRow(["Name", "Type", "Description", "Key", "File"]);

  const rows = components.map(c => ({
    Name: c.name || "",
    Type: c.type || "",
    Description: c.description || "",
    Key: c.id || "",
    File: c.file_key || ""
  }));

  await sheet.addRows(rows);
}

(async () => {
  try {
    console.log("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞...");

    let allComponents = [];

    for (const fileUrl of filesList) {
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${fileUrl}`);
      const match = fileUrl.match(/file\/([a-zA-Z0-9]+)\//);
      if (!match) {
        console.warn(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á —Ñ–∞–π–ª–∞ –∏–∑ URL: ${fileUrl}`);
        continue;
      }
      const fileKey = match[1];

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ
      const documentTree = await getFileDocument(fileKey);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ API (—Å description)
      const componentsFromAPI = await getAllComponents(fileKey);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ COMPONENT –∏ COMPONENT_SET –∏–∑ –¥–µ—Ä–µ–≤–∞
      const componentsFromTree = [];
      collectComponentsFromNode(documentTree, componentsFromTree);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
      const merged = mergeDescriptions(componentsFromTree, componentsFromAPI);

      // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –¥–æ–±–∞–≤–∏–º file_key –∫–∞–∂–¥–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
      merged.forEach(c => { if (!c.file_key) c.file_key = fileKey; });

      allComponents.push(...merged);
    }

    console.log(`üì¶ –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö: ${allComponents.length}`);

    await writeToGoogleSheets(allComponents);

    console.log("‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets.");
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", e);
    process.exit(1);
  }
})();
