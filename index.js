const fs = require("fs");
const fetch = require("node-fetch");
const { GoogleSpreadsheet } = require("google-spreadsheet");

const FIGMA_TOKEN = process.env.FIGMA_TOKEN;
const SHEET_ID = process.env.GOOGLE_SHEETS_ID;
const GOOGLE_CREDENTIALS = JSON.parse(process.env.GOOGLE_CREDENTIALS);

function parseFigmaFiles() {
  try {
    const content = fs.readFileSync("figma_files.txt", "utf-8");
    return content
      .split("\n")
      .map(line => line.trim())
      .filter(line => line && !line.startsWith("#"))
      .map(url => {
        const match = url.match(/figma\.com\/file\/([a-zA-Z0-9]+)\//);
        if (match) return { key: match[1], url };
        return null;
      })
      .filter(Boolean);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è figma_files.txt:", e);
    return [];
  }
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏–∑ /components
async function getAllComponents(fileKey) {
  const res = await fetch(`https://api.figma.com/v1/files/${fileKey}/components`, {
    headers: { "X-Figma-Token": FIGMA_TOKEN }
  });
  if (!res.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ Figma API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (${fileKey}): ${res.status} ${res.statusText}`);
  }
  const data = await res.json();
  return data.meta.components || [];
}

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ node_id —á–µ—Ä–µ–∑ nodes API
async function getPageName(fileKey, nodeId) {
  const res = await fetch(
    `https://api.figma.com/v1/files/${fileKey}/nodes?ids=${nodeId}`,
    { headers: { "X-Figma-Token": FIGMA_TOKEN } }
  );
  if (!res.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (${nodeId}): ${res.status} ${res.statusText}`);
  }
  const data = await res.json();
  // –ø—É—Ç—å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ‚Äî –≤ parents (—Å–∞–º node + —Ä–æ–¥–∏—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π)
  // –í –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å document —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ–¥ nodeId
  // –ò–Ω–æ–≥–¥–∞ parent - —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞. –í–æ–∑—å–º–µ–º –∏–º—è –ø–µ—Ä–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è:
  try {
    const node = data.nodes[nodeId].document;
    // –†–æ–¥–∏—Ç–µ–ª—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —ç—Ç–æ node.parent –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º API, –Ω–æ —Ç—É—Ç –µ–≥–æ –Ω–µ—Ç, 
    // –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º –∏–º—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–µ—Å–ª–∏ –µ—Å—Ç—å children)
    // –û–±—ã—á–Ω–æ –≤ data.nodes[nodeId].document –µ—Å—Ç—å "parent" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º document.name –∫–∞–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—É:
    // –µ—Å–ª–∏ node.type === "COMPONENT", —Ç–æ parent - —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ª–µ–∂–∏—Ç –≤ ancestors, –Ω–æ API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ancestors, –ø–æ—ç—Ç–æ–º—É
    // –¥–µ–ª–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —ç—Ç–æ –±–ª–∏–∂–∞–π—à–∏–π ancestor —Å type="CANVAS"
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –≤ data.nodes[nodeId].document

    // –ü–æ–∫–∞ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:
    return node ? node.name : "Unknown";
  } catch {
    return "Unknown";
  }
}

async function main() {
  try {
    console.log("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞...");
    const files = parseFigmaFiles();
    if (files.length === 0) throw new Error("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ figma_files.txt");

    let allComponents = [];
    for (const file of files) {
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${file.url}`);
      const components = await getAllComponents(file.key);
      console.log(`   –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: ${components.length}`);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ç–µ–≥–∞–º–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
      const taggedComponents = components.filter(c => c.description && c.description.match(/#[\w–∞-—è—ë–ê-–Ø–Å-]+/gi));

      console.log(`   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏: ${taggedComponents.length}`);

      for (const comp of taggedComponents) {
        const pageName = await getPageName(file.key, comp.node_id);
        allComponents.push({
          file: file.url,
          page: pageName,
          name: comp.name,
          tags: (comp.description.match(/#[\w–∞-—è—ë–ê-–Ø–Å-]+/gi) || []).map(t => t.slice(1)).join(", "),
          link: `https://www.figma.com/file/${file.key}/?node-id=${comp.node_id}`
        });
      }
    }

    console.log(`–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏: ${allComponents.length}`);

    if (allComponents.length === 0) {
      console.log("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ç–µ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return;
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    const doc = new GoogleSpreadsheet(SHEET_ID);
    await doc.useServiceAccountAuth(GOOGLE_CREDENTIALS);
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    await sheet.clear();
    await sheet.setHeaderRow(["–§–∞–π–ª", "–°—Ç—Ä–∞–Ω–∏—Ü–∞", "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", "–¢–µ–≥–∏", "–°—Å—ã–ª–∫–∞"]);

    const rows = allComponents.map(c => ({
      –§–∞–π–ª: c.file,
      –°—Ç—Ä–∞–Ω–∏—Ü–∞: c.page,
      –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: c.name,
      –¢–µ–≥–∏: c.tags,
      –°—Å—ã–ª–∫–∞: c.link,
    }));

    await sheet.addRows(rows);

    console.log("üîÑ –ì–æ—Ç–æ–≤–æ!");
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", e);
    process.exit(1);
  }
}

main();
