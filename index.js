const fetch = require('node-fetch');
const { google } = require('googleapis');

const CONFIG = {
  FIGMA_TOKEN: process.env.FIGMA_TOKEN,
  FIGMA_FILE_KEY: process.env.FIGMA_FILE_KEY,
  GOOGLE_SHEETS_ID: process.env.GOOGLE_SHEETS_ID,
  GOOGLE_CREDENTIALS: JSON.parse(process.env.GOOGLE_CREDENTIALS || '{}'),
  MAX_COMPONENTS: 2000,
  SCAN_DEPTH: 999
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
function extractTags(description) {
  if (!description) return [];
  
  // –ò—â–µ–º –≤—Å–µ —Å–ª–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å #
  const tagRegex = /#(\w+)/g;
  const matches = description.match(tagRegex);
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–∏–º–≤–æ–ª #
  return matches 
    ? [...new Set(matches.map(tag => tag.substring(1)))]
    : [];
}

async function getFullFileStructure() {
  console.log('üìÇ –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞...');
  const response = await fetch(`https://api.figma.com/v1/files/${CONFIG.FIGMA_FILE_KEY}`, {
    headers: { 'X-FIGMA-TOKEN': CONFIG.FIGMA_TOKEN }
  });

  if (!response.ok) {
    const text = await response.text();
    console.error(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞: HTTP ${response.status} ${response.statusText}`);
    console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', text);
    throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
  }

  return await response.json();
}

function findComponentsWithTags(node, pageName, results = []) {
  if (!node) return results;

  if (node.type === 'COMPONENT' || node.type === 'COMPONENT_SET') {
    const tags = extractTags(node.description);
    const hasTags = tags.length > 0;

    console.log(`[${hasTags ? '‚úÖ' : '‚ùå'}] ${node.name} (${node.type})`);
    if (!hasTags) console.log('   ‚õî –ù–µ—Ç —Ç–µ–≥–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏');

    if (hasTags) {
      results.push({
        id: node.id,
        name: node.name.replace(/\n/g, ' '),
        tags: tags.join(', '), // –¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        page: pageName
      });
    }
  }

  if (node.children && Array.isArray(node.children)) {
    node.children.forEach(child => {
      findComponentsWithTags(child, pageName, results);
    });
  }

  return results;
}

async function getComponentsUsage(componentIds) {
  console.log('üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏...');
  const chunkSize = 100;
  const usageData = {};

  for (let i = 0; i < componentIds.length; i += chunkSize) {
    const chunk = componentIds.slice(i, i + chunkSize);
    const response = await fetch(
      `https://api.figma.com/v1/files/${CONFIG.FIGMA_FILE_KEY}/component_usages?ids=${chunk.join(',')}`,
      { headers: { 'X-FIGMA-TOKEN': CONFIG.FIGMA_TOKEN } }
    );

    if (!response.ok) {
      console.error(`–û—à–∏–±–∫–∞ –¥–ª—è —á–∞–Ω–∫–∞ ${i}-${i + chunkSize}:`, response.status);
      continue;
    }

    const data = await response.json();
    Object.assign(usageData, data.meta);
  }

  return usageData;
}

async function getAllComponentsWithTags() {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ç–µ–≥–∞–º–∏)...');
    const { document } = await getFullFileStructure();

    let allComponents = [];

    for (const page of document.children) {
      console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${page.name}`);
      const pageComponents = findComponentsWithTags(page, page.name);

      allComponents = [...allComponents, ...pageComponents];
      console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${pageComponents.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏`);

      if (allComponents.length >= CONFIG.MAX_COMPONENTS) {
        console.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ ${CONFIG.MAX_COMPONENTS} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
        break;
      }
    }

    return allComponents;

  } catch (error) {
    console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    throw error;
  }
}

async function updateSheets(components) {
  const auth = new google.auth.GoogleAuth({
    credentials: CONFIG.GOOGLE_CREDENTIALS,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  const sheets = google.sheets({ version: 'v4', auth });

  const rows = [
    ['–ö–æ–º–ø–æ–Ω–µ–Ω—Ç', '–¢–µ–≥–∏', '–°—Å—ã–ª–∫–∞'],
    ...components.map(comp => [
      comp.name,
      comp.tags,
      `https://www.figma.com/file/${CONFIG.FIGMA_FILE_KEY}/?node-id=${comp.id}`
    ])
  ];

  console.log('üìù –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', rows.slice(1, 4));

  // –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
  await sheets.spreadsheets.values.clear({
    spreadsheetId: CONFIG.GOOGLE_SHEETS_ID,
    range: 'A1:C1000'
  });

  await sheets.spreadsheets.values.update({
    spreadsheetId: CONFIG.GOOGLE_SHEETS_ID,
    range: 'A1',
    valueInputOption: 'USER_ENTERED',
    resource: { values: rows }
  });
}

async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
    const startTime = Date.now();

    const components = await getAllComponentsWithTags();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏: ${components.length}`);

    if (components.length > 0) {
      await updateSheets(components);
      console.log(`üîÑ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∑–∞ ${Math.round((Date.now() - startTime) / 1000)} —Å–µ–∫`);
      console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: https://docs.google.com/spreadsheets/d/${CONFIG.GOOGLE_SHEETS_ID}/edit`);
    } else {
      console.log('‚ÑπÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ç–µ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('1. –ù–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏ (#tag) –≤ –æ–ø–∏—Å–∞–Ω–∏–∏');
      console.log('2. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–∫–µ–Ω–∞');
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main().catch(console.error);