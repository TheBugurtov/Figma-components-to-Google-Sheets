const fetch = require('node-fetch');
const { google } = require('googleapis');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  FIGMA_TOKEN: process.env.FIGMA_TOKEN,
  FIGMA_FILE_KEY: 'oZGlxnWyOHTAgG6cyLkNJh',
  GOOGLE_SHEETS_ID: '1liLtRG7yUe1T5wfwEqdOy_B4H-tne2cDoBMIbZZnTUI',
  GOOGLE_CREDENTIALS: JSON.parse(process.env.GOOGLE_CREDENTIALS),
  COMPONENTS_LIMIT: 10
};

async function getFigmaComponents() {
  console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ Figma...');
  const response = await fetch(`https://api.figma.com/v1/files/${CONFIG.FIGMA_FILE_KEY}/components`, {
    headers: { 'X-FIGMA-TOKEN': CONFIG.FIGMA_TOKEN }
  });
  
  if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ API: ${response.statusText}`);
  
  const data = await response.json();
  return data.meta?.components?.slice(0, CONFIG.COMPONENTS_LIMIT) || [];
}

async function getComponentParameters(componentIds) {
  console.log('üìä –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
  const response = await fetch(
    `https://api.figma.com/v1/files/${CONFIG.FIGMA_FILE_KEY}/nodes?ids=${componentIds.join(',')}`,
    { headers: { 'X-FIGMA-TOKEN': CONFIG.FIGMA_TOKEN } }
  );
  
  if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${response.statusText}`);
  return await response.json();
}

async function updateGoogleSheets(components) {
  const auth = new google.auth.GoogleAuth({
    credentials: CONFIG.GOOGLE_CREDENTIALS,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  const sheets = google.sheets({ version: 'v4', auth });

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const rows = [
    ['–ö–æ–º–ø–æ–Ω–µ–Ω—Ç (—Å—Å—ã–ª–∫–∞ –Ω–∞ Figma)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'],
    ...components.map(comp => [
      `=HYPERLINK("https://www.figma.com/file/${CONFIG.FIGMA_FILE_KEY}/?node-id=${comp.node_id}", "${comp.name}")`,
      comp.instances_count || 0,
      JSON.stringify({
        width: comp.absoluteBoundingBox?.width,
        height: comp.absoluteBoundingBox?.height,
        type: comp.type
      }, null, 2)
    ])
  ];

  console.log('üìù –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', rows.slice(1, 3));

  // –û—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–ø–∏—Å—å
  await sheets.spreadsheets.values.clear({
    spreadsheetId: CONFIG.GOOGLE_SHEETS_ID,
    range: 'A1:C1000'
  });

  await sheets.spreadsheets.values.update({
    spreadsheetId: CONFIG.GOOGLE_SHEETS_ID,
    range: 'A1',
    valueInputOption: 'USER_ENTERED',
    resource: { values: rows }
  });
}

async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    const components = await getFigmaComponents();
    if (components.length === 0) throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
    
    console.log(`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const componentIds = components.map(c => c.node_id);
    const details = await getComponentParameters(componentIds);
    
    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const enrichedComponents = components.map(comp => ({
      ...comp,
      ...details.nodes[comp.node_id]?.document,
      absoluteBoundingBox: details.nodes[comp.node_id]?.document?.absoluteBoundingBox
    }));
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
    await updateGoogleSheets(enrichedComponents);
    
    console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: 
    https://docs.google.com/spreadsheets/d/${CONFIG.GOOGLE_SHEETS_ID}/edit`);
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main();