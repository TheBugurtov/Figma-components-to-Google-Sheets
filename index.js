const fetch = require('node-fetch');
const { google } = require('googleapis');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  FIGMA_TOKEN: process.env.FIGMA_TOKEN,
  FIGMA_FILE_KEY: 'oZGlxnWyOHTAgG6cyLkNJh',
  GOOGLE_SHEETS_ID: '1liLtRG7yUe1T5wfwEqdOy_B4H-tne2cDoBMIbZZnTUI',
  GOOGLE_CREDENTIALS: JSON.parse(process.env.GOOGLE_CREDENTIALS),
  SCAN_DEPTH: 3, // –ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (1-4)
  MAX_COMPONENTS: 500 // –õ–∏–º–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
};

// 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
async function getFileStructure() {
  const response = await fetch(`https://api.figma.com/v1/files/${CONFIG.FIGMA_FILE_KEY}`, {
    headers: { 'X-FIGMA-TOKEN': CONFIG.FIGMA_TOKEN }
  });
  if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞');
  return await response.json();
}

// 2. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function findComponents(node, result = []) {
  if (node.type === 'COMPONENT' && 
      node.description && 
      !node.name.includes('=')) {
    result.push({
      id: node.id,
      name: node.name,
      description: node.description,
      page: node.pageName // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    });
  }

  if (node.children) {
    node.children.forEach(child => {
      if (CONFIG.SCAN_DEPTH > 1) {
        findComponents(child, result);
      }
    });
  }

  return result;
}

// 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
async function getUsageCounts(componentIds) {
  const chunks = [];
  for (let i = 0; i < componentIds.length; i += 50) {
    chunks.push(componentIds.slice(i, i + 50));
  }

  const usageData = {};
  for (const chunk of chunks) {
    const response = await fetch(
      `https://api.figma.com/v1/files/${CONFIG.FIGMA_FILE_KEY}/component_usages?ids=${chunk.join(',')}`,
      { headers: { 'X-FIGMA-TOKEN': CONFIG.FIGMA_TOKEN } }
    );
    const data = await response.json();
    Object.assign(usageData, data.meta);
  }

  return usageData;
}

// 4. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
async function getAllValidComponents() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...');
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
  const { document } = await getFileStructure();
  
  // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  let allComponents = [];
  const pageIds = document.children.map(page => page.id);
  
  console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${pageIds.length}`);
  
  for (const pageId of pageIds) {
    const response = await fetch(
      `https://api.figma.com/v1/files/${CONFIG.FIGMA_FILE_KEY}/nodes?ids=${pageId}`,
      { headers: { 'X-FIGMA-TOKEN': CONFIG.FIGMA_TOKEN } }
    );
    const { nodes } = await response.json();
    const pageComponents = findComponents(nodes[pageId]);
    allComponents = [...allComponents, ...pageComponents];
    
    if (allComponents.length >= CONFIG.MAX_COMPONENTS) {
      console.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ ${CONFIG.MAX_COMPONENTS} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
      break;
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
  const componentIds = allComponents.map(c => c.id);
  const usageData = await getUsageCounts(componentIds);
  
  // –û–±–æ–≥–∞—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∞–Ω–Ω—ã–º–∏
  return allComponents.map(comp => ({
    ...comp,
    instances_count: usageData[comp.id]?.instances_count || 0
  }));
}

// 5. –ó–∞–ø–∏—Å—å –≤ Google Sheets
async function updateGoogleSheets(components) {
  const auth = new google.auth.GoogleAuth({
    credentials: CONFIG.GOOGLE_CREDENTIALS,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  const sheets = google.sheets({ version: 'v4', auth });

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const rows = [
    ['–°—Ç—Ä–∞–Ω–∏—Ü–∞', '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', '–°—Å—ã–ª–∫–∞'],
    ...components.map(comp => [
      comp.page,
      comp.name,
      comp.description,
      comp.instances_count,
      `https://www.figma.com/file/${CONFIG.FIGMA_FILE_KEY}/?node-id=${comp.id}`
    ])
  ];

  // –ó–∞–ø–∏—Å—å
  await sheets.spreadsheets.values.update({
    spreadsheetId: CONFIG.GOOGLE_SHEETS_ID,
    range: 'A1',
    valueInputOption: 'USER_ENTERED',
    resource: { values: rows }
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
    
    const components = await getAllValidComponents();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${components.length}`);
    
    if (components.length > 0) {
      await updateGoogleSheets(components);
      console.log(`üìä –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É: 
      https://docs.google.com/spreadsheets/d/${CONFIG.GOOGLE_SHEETS_ID}/edit`);
    } else {
      console.log('‚ÑπÔ∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

main();