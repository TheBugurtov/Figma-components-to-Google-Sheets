const fs = require("fs");
const fetch = require("node-fetch");
const { GoogleSpreadsheet } = require("google-spreadsheet");

// env
const FIGMA_TOKEN = process.env.FIGMA_TOKEN;
const GOOGLE_CREDENTIALS = JSON.parse(process.env.GOOGLE_CREDENTIALS);
const GOOGLE_SHEETS_ID = process.env.GOOGLE_SHEETS_ID;

// files list
const filesList = fs.readFileSync("figma_files.txt", "utf8")
  .split("\n")
  .map(l => l.trim())
  .filter(Boolean);

// fetch helper
async function fetchJson(url) {
  const res = await fetch(url, { headers: { "X-Figma-Token": FIGMA_TOKEN } });
  if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}: ${res.status} ${res.statusText}`);
  return res.json();
}

// –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ /components (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç { node_id: {...} })
async function getAllFigmaComponents(fileKey) {
  const url = `https://api.figma.com/v1/files/${fileKey}/components`;
  const data = await fetchJson(url);
  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–ª—é—á –∫–∞–∫ node_id
  const compsObj = data.meta.components || {};
  return Object.values(compsObj).map(c => ({ ...c }));
}

// –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞–ø—É nodeId -> node.type —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞
function buildNodeTypeMap(doc) {
  const map = {};
  function walk(node) {
    if (!node) return;
    if (node.id) map[node.id] = node.type || map[node.id] || null;
    if (Array.isArray(node.children)) {
      for (const ch of node.children) walk(ch);
    }
  }
  walk(doc);
  return map;
}

// –∑–∞–ø–∏—Å—å –≤ Google Sheets (google-spreadsheet)
async function writeToGoogleSheets(rows) {
  const doc = new GoogleSpreadsheet(GOOGLE_SHEETS_ID);
  await doc.useServiceAccountAuth(GOOGLE_CREDENTIALS);
  await doc.loadInfo();
  const sheet = doc.sheetsByIndex[0];
  await sheet.clear();
  await sheet.setHeaderRow(["Component", "Link", "Tags", "Type", "File"]);
  // rows ‚Äî –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–ª—é—á–∞–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
  await sheet.addRows(rows);
}

// –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
(async () => {
  try {
    console.log("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞...");
    let allRows = [];

    for (const fileUrl of filesList) {
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${fileUrl}`);
      const m = fileUrl.match(/file\/([a-zA-Z0-9]+)\//);
      if (!m) {
        console.warn(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Ç–∞—â–∏—Ç—å fileKey –∏–∑ URL: ${fileUrl}`);
        continue;
      }
      const fileKey = m[1];

      // 1) –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª (–¥–µ—Ä–µ–≤–æ) –∏ —Å—Ç—Ä–æ–∏–º –º–∞–ø—É id->type
      const fileData = await fetchJson(`https://api.figma.com/v1/files/${fileKey}`);
      const documentTree = fileData.document;
      const nodeTypeMap = buildNodeTypeMap(documentTree);

      // 2) –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ /components
      const components = await getAllFigmaComponents(fileKey);
      console.log(`   –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ /components: ${components.length}`);

      // 3) —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
      for (const comp of components) {
        // node id –≤ –æ—Ç–≤–µ—Ç–µ /components ‚Äî –æ–±—ã—á–Ω–æ node_id
        const nodeId = comp.node_id || comp.nodeId || comp.id || comp.key || "";
        const name = comp.name || "";
        const description = comp.description || "";
        const link = `https://www.figma.com/file/${fileKey}?node-id=${encodeURIComponent(nodeId)}`;

        // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–µ—Ä–µ–∑ –º–∞–ø—É; –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "Component"
        const rawType = nodeTypeMap[nodeId] || nodeTypeMap[comp.node_id] || null;
        const typeLabel = rawType === "COMPONENT_SET" ? "Component Set" : "Component";

        allRows.push({
          Component: name,
          Link: link,
          Tags: description,
          Type: typeLabel,
          File: fileKey
        });
      }
    }

    console.log(`üì¶ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏: ${allRows.length}`);
    await writeToGoogleSheets(allRows);
    console.log("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", err);
    process.exit(1);
  }
})();
