const fs = require("fs");
const fetch = require("node-fetch");
const { GoogleSpreadsheet } = require("google-spreadsheet");

const FIGMA_TOKEN = process.env.FIGMA_TOKEN;
const GOOGLE_CREDENTIALS = JSON.parse(process.env.GOOGLE_CREDENTIALS);
const GOOGLE_SHEETS_ID = process.env.GOOGLE_SHEETS_ID;

const filesList = fs.readFileSync("figma_files.txt", "utf8")
  .split("\n")
  .map(l => l.trim())
  .filter(Boolean);

async function fetchJson(url) {
  const res = await fetch(url, { headers: { "X-Figma-Token": FIGMA_TOKEN } });
  if (!res.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}: ${res.status} ${res.statusText}`);
  }
  return await res.json();
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å description –∏–∑ /components
async function getAllComponents(fileKey) {
  const url = `https://api.figma.com/v1/files/${fileKey}/components`;
  const data = await fetchJson(url);
  return data.meta.components || {};
}

// –û–±—Ö–æ–¥–∏–º –¥–µ—Ä–µ–≤–æ, —á—Ç–æ–±—ã –≤—ã—Ç–∞—â–∏—Ç—å ID –∏ —Ç–∏–ø—ã
function collectComponentsFromNode(node, acc) {
  if (!node) return;
  if (node.type === "COMPONENT" || node.type === "COMPONENT_SET") {
    acc.push({
      id: node.id,
      name: node.name,
      type: node.type
    });
  }
  if (Array.isArray(node.children)) {
    for (const child of node.children) {
      collectComponentsFromNode(child, acc);
    }
  }
}

// –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
function mergeData(componentsFromTree, componentsFromAPI, fileKey) {
  return componentsFromTree.map(c => {
    const descObj = componentsFromAPI[c.id];
    const description = descObj ? descObj.description || "" : "";
    return {
      component: c.name || "",
      link: `https://www.figma.com/file/${fileKey}?node-id=${encodeURIComponent(c.id)}`,
      tags: description,
      type: c.type,
      group: c.type === "COMPONENT_SET" ? "Components Set" : "Component"
    };
  });
}

async function writeToGoogleSheets(components) {
  const doc = new GoogleSpreadsheet(GOOGLE_SHEETS_ID);
  await doc.useServiceAccountAuth(GOOGLE_CREDENTIALS);
  await doc.loadInfo();

  const sheet = doc.sheetsByIndex[0];
  await sheet.clear();
  await sheet.setHeaderRow(["Component", "Link", "Tags", "Type", "Group"]);

  await sheet.addRows(components);
}

(async () => {
  try {
    console.log("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞...");

    let allComponents = [];

    for (const fileUrl of filesList) {
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${fileUrl}`);
      const match = fileUrl.match(/file\/([a-zA-Z0-9]+)\//);
      if (!match) {
        console.warn(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á —Ñ–∞–π–ª–∞ –∏–∑ URL: ${fileUrl}`);
        continue;
      }
      const fileKey = match[1];

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ
      const fileData = await fetchJson(`https://api.figma.com/v1/files/${fileKey}`);
      const documentTree = fileData.document;

      // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ API (—Å description)
      const componentsFromAPI = await getAllComponents(fileKey);

      // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –¥–µ—Ä–µ–≤–∞
      const componentsFromTree = [];
      collectComponentsFromNode(documentTree, componentsFromTree);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º
      const merged = mergeData(componentsFromTree, componentsFromAPI, fileKey);
      allComponents.push(...merged);
    }

    console.log(`üì¶ –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${allComponents.length}`);

    await writeToGoogleSheets(allComponents);

    console.log("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", e);
    process.exit(1);
  }
})();
